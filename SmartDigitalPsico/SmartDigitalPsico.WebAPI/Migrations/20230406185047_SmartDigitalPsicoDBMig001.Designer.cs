// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Repository.Context;

#nullable disable

namespace SmartDigitalPsico.WebAPI.Migrations
{
    [DbContext(typeof(SmartDigitalPsicoDataContext))]
    [Migration("20230406185047_SmartDigitalPsicoDBMig001")]
    partial class SmartDigitalPsicoDBMig001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtiesId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalsId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    b.HasData(
                        new
                        {
                            MedicalsId = 1L,
                            SpecialtiesId = 1L
                        });
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.Property<long>("RoleGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleGroupUser", "dbo");

                    b.HasData(
                        new
                        {
                            RoleGroupsId = 1L,
                            UsersId = 1L
                        },
                        new
                        {
                            RoleGroupsId = 5L,
                            UsersId = 1L
                        },
                        new
                        {
                            RoleGroupsId = 5L,
                            UsersId = 2L
                        },
                        new
                        {
                            RoleGroupsId = 6L,
                            UsersId = 1L
                        },
                        new
                        {
                            RoleGroupsId = 6L,
                            UsersId = 2L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CacheId");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CacheKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLogs", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EndPointUrl_Cache");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EndPointUrl_StorageFiles");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<int>("TypeLocationCache")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationCache");

                    b.Property<int>("TypeLocationQueeMessaging")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationQueeMessaging");

                    b.Property<int>("TypeLocationSaveFiles")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFiles");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(544),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(569),
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(566),
                            TypeLocationCache = 1,
                            TypeLocationQueeMessaging = 0,
                            TypeLocationSaveFiles = 0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("LanguageValue");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLanguage", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(654),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(658),
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(656)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Genders", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Masculino",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Feminino",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Officies", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicólogo",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicóloga",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Clínico",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RolePolicyClaimCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("RolePolicyClaimCode");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrador",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Medico",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Medical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Recepcionista",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paciente",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Leitura",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Read"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Escrita",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Write"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialties", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Clínica",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Social",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia educacional",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Esportiva ",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia organizacional",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia hospitalar",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia do trânsito",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.InfoTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("InfoTag", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Accreditation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SecurityKey");

                    b.Property<int>("TypeAccreditation")
                        .HasColumnType("int")
                        .HasColumnName("TypeAccreditation");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medicals", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 77, DateTimeKind.Local).AddTicks(9679),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 77, DateTimeKind.Local).AddTicks(9690),
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 77, DateTimeKind.Local).AddTicks(9692),
                            Name = "Medical MOCK ",
                            OfficeId = 3L,
                            TypeAccreditation = 0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeLocationSaveFile")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AddressCep");

                    b.Property<string>("AddressCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressCity");

                    b.Property<string>("AddressNeighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressNeighborhood");

                    b.Property<string>("AddressState")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressState");

                    b.Property<string>("AddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressStreet");

                    b.Property<string>("Cpf")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Education")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Education");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmergencyContactName");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EmergencyContactPhoneNumber");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatus");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Profession")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Profession");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Rg");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patients", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressCep = "45675-970",
                            AddressCity = "Aurelino Leal",
                            AddressNeighborhood = "Centro",
                            AddressState = "Bahia",
                            AddressStreet = "Avenida Presidente Médici 264",
                            Cpf = "947.846.605-42",
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 84, DateTimeKind.Local).AddTicks(5322),
                            CreatedUserId = 1L,
                            DateOfBirth = new DateTime(1960, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Superior",
                            Email = "tiago.thales.mendes@andrade.com",
                            EmergencyContactName = "Milena Isabelly Vanessa",
                            EmergencyContactPhoneNumber = "(73) 98540-4268",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 84, DateTimeKind.Local).AddTicks(5333),
                            MaritalStatus = 0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 84, DateTimeKind.Local).AddTicks(5343),
                            Name = "Tiago Thales Mendes",
                            PhoneNumber = "(73) 2877-3408",
                            Profession = "Professor",
                            Rg = "13.809.283-7"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("FollowUp_Neurological");

                    b.Property<string>("FollowUp_Psychiatric")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("FollowUp_Psychiatric");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeLocationSaveFile")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Observation");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientInfoTag", b =>
                {
                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("InfoTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("PatientId", "InfoTagId");

                    b.HasIndex("InfoTagId");

                    b.ToTable("PatientInfoTag", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("Dosage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Dosage");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MainDrug");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Posology");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit")
                        .HasColumnName("IsReaded");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("MessagePatient");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit")
                        .HasColumnName("Notified");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotifiedDate");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadingDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Annotation");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AnnotationDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecords", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Login")
                        .HasColumnOrder(4);

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Admin")
                        .HasColumnName("Role");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId")
                        .IsUnique()
                        .HasFilter("[MedicalId] IS NOT NULL");

                    b.ToTable("Users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(1153),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(1155),
                            Login = "admin",
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 72, DateTimeKind.Local).AddTicks(1157),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 99, 160, 130, 13, 99, 55, 209, 57, 186, 195, 102, 194, 172, 169, 230, 39, 242, 246, 117, 100, 59, 138, 182, 240, 152, 200, 136, 145, 51, 141, 170, 23, 8, 219, 97, 219, 241, 190, 78, 146, 162, 33, 231, 47, 243, 117, 16, 74, 97, 173, 184, 101, 198, 158, 2, 58, 22, 13, 237, 28, 112, 46, 19, 82 },
                            PasswordSalt = new byte[] { 108, 50, 2, 140, 75, 116, 157, 39, 119, 72, 12, 47, 121, 70, 155, 92, 98, 117, 40, 3, 24, 48, 1, 98, 154, 136, 240, 195, 199, 48, 162, 198, 191, 27, 64, 164, 145, 136, 150, 206, 21, 16, 84, 139, 86, 232, 10, 73, 99, 8, 95, 120, 133, 225, 74, 133, 76, 236, 195, 137, 245, 99, 104, 167, 241, 215, 10, 242, 230, 213, 64, 72, 99, 155, 168, 196, 58, 199, 235, 211, 152, 172, 143, 90, 38, 224, 136, 64, 51, 34, 211, 97, 19, 223, 176, 218, 14, 134, 178, 181, 163, 214, 146, 157, 132, 185, 180, 138, 113, 221, 215, 64, 84, 91, 182, 54, 229, 20, 156, 245, 135, 25, 63, 61, 13, 44, 246, 76 },
                            Role = "Admin",
                            TimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2023, 4, 6, 15, 50, 47, 78, DateTimeKind.Local).AddTicks(687),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2023, 4, 6, 15, 50, 47, 78, DateTimeKind.Local).AddTicks(694),
                            Login = "doctor",
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2023, 4, 6, 15, 50, 47, 78, DateTimeKind.Local).AddTicks(697),
                            Name = "User Medical",
                            PasswordHash = new byte[] { 217, 227, 109, 150, 208, 149, 236, 206, 145, 123, 6, 107, 17, 170, 39, 194, 43, 149, 167, 246, 234, 193, 169, 244, 17, 34, 255, 175, 233, 191, 223, 40, 74, 209, 53, 151, 43, 57, 181, 215, 227, 156, 220, 248, 208, 60, 83, 12, 218, 25, 144, 189, 234, 217, 39, 85, 108, 51, 35, 207, 149, 224, 35, 231 },
                            PasswordSalt = new byte[] { 9, 249, 93, 149, 64, 206, 193, 217, 157, 87, 2, 121, 16, 227, 92, 143, 195, 237, 23, 113, 33, 171, 118, 243, 251, 140, 89, 20, 121, 125, 210, 136, 151, 224, 215, 80, 83, 223, 21, 143, 69, 138, 3, 183, 13, 163, 80, 239, 208, 212, 9, 20, 219, 91, 196, 99, 223, 255, 96, 70, 226, 179, 183, 181, 44, 132, 228, 168, 76, 64, 60, 238, 165, 24, 144, 16, 172, 89, 238, 125, 103, 188, 59, 190, 23, 0, 150, 243, 32, 233, 118, 180, 88, 79, 250, 106, 95, 60, 139, 178, 37, 168, 234, 164, 58, 237, 225, 27, 158, 63, 216, 13, 132, 49, 71, 206, 116, 236, 205, 233, 255, 131, 47, 18, 60, 57, 3, 175 },
                            Role = "Medical",
                            TimeZone = "E. South America Standard Time"
                        });
                });

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", null)
                        .WithMany()
                        .HasForeignKey("MedicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.RoleGroup", null)
                        .WithMany()
                        .HasForeignKey("RoleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.InfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", null)
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientInfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.InfoTag", "InfoTag")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("InfoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InfoTag");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.User", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithOne("User")
                        .HasForeignKey("SmartDigitalPsico.Model.Entity.Principals.User", "MedicalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.InfoTag", b =>
                {
                    b.Navigation("PatientInfoTags");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.Navigation("Patienties");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientInfoTags");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
