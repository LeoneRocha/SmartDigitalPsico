// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Repository.Context;

#nullable disable

namespace SmartDigitalPsico.WebAPI.Migrations
{
    [DbContext(typeof(SmartDigitalPsicoDataContext))]
    [Migration("20230320174714_SmartDigitalPsicoDBMig003")]
    partial class SmartDigitalPsicoDBMig003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtiesId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalsId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    b.HasData(
                        new
                        {
                            MedicalsId = 1L,
                            SpecialtiesId = 1L
                        });
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.Property<long>("RoleGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleGroupUser", "dbo");

                    b.HasData(
                        new
                        {
                            RoleGroupsId = 1L,
                            UsersId = 1L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CacheId");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CacheKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLogs", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EndPointUrl_Cache");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EndPointUrl_StorageFiles");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<int>("TypeLocationCache")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationCache");

                    b.Property<int>("TypeLocationQueeMessaging")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationQueeMessaging");

                    b.Property<int>("TypeLocationSaveFiles")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFiles");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4390),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4399),
                            ModifyDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4399),
                            TypeLocationCache = 1,
                            TypeLocationQueeMessaging = 0,
                            TypeLocationSaveFiles = 0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Configurations.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LanguageKey");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("LanguageValue");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLanguage", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4430),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4432),
                            ModifyDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4431)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Genders", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Masculino",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Feminino",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Officies", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicólogo",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicóloga",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Clínico",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrador",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Medico",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Recepcionista",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paciente",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Leitura",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Escrita",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialties", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Clínica",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Social",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia educacional",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia Esportiva ",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia organizacional",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia hospitalar",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Psicologia do trânsito",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Accreditation");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SecurityKey");

                    b.Property<int>("TypeAccreditation")
                        .HasColumnType("int")
                        .HasColumnName("TypeAccreditation");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medicals", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(5226),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(5227),
                            ModifyDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(5228),
                            Name = "Medical MOCK ",
                            OfficeId = 3L,
                            TypeAccreditation = 0,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeLocationSaveFile")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AddressCep");

                    b.Property<string>("AddressCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressCity");

                    b.Property<string>("AddressNeighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressNeighborhood");

                    b.Property<string>("AddressState")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressState");

                    b.Property<string>("AddressStreet")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AddressStreet");

                    b.Property<string>("Cpf")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Education")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Education");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmergencyContactName");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EmergencyContactPhoneNumber");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Profession")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Profession");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Rg");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patients", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("FollowUp_Neurological");

                    b.Property<string>("FollowUp_Psychiatric")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("FollowUp_Psychiatric");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeLocationSaveFile")
                        .HasColumnType("int")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Observation");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("Dosage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Dosage");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MainDrug");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Posology");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformations", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit")
                        .HasColumnName("IsReaded");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("MessagePatient");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("bit")
                        .HasColumnName("Notified");

                    b.Property<DateTime>("NotifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotifiedDate");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadingDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Annotation");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AnnotationDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecords", "dbo");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Enable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Language");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Login")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Admin")
                        .HasColumnName("Role");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TimeZone");

                    b.HasKey("Id");

                    b.ToTable("Users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4674),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4674),
                            Login = "admin",
                            ModifyDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4675),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 41, 112, 167, 128, 53, 193, 65, 249, 58, 186, 160, 248, 84, 232, 163, 220, 118, 126, 117, 219, 71, 61, 77, 49, 31, 119, 165, 168, 176, 228, 25, 245, 169, 11, 189, 171, 182, 15, 95, 47, 62, 237, 88, 129, 243, 21, 141, 254, 212, 215, 116, 208, 156, 132, 21, 41, 13, 97, 60, 19, 253, 47, 37, 184 },
                            PasswordSalt = new byte[] { 23, 72, 23, 194, 57, 211, 85, 118, 247, 207, 232, 170, 154, 199, 5, 193, 21, 133, 213, 154, 191, 99, 198, 201, 23, 45, 77, 248, 245, 254, 164, 92, 13, 170, 12, 3, 74, 185, 92, 89, 42, 44, 116, 185, 148, 96, 191, 185, 0, 175, 63, 165, 208, 202, 11, 195, 104, 220, 140, 181, 220, 219, 62, 161, 166, 88, 20, 37, 109, 246, 105, 16, 11, 75, 211, 4, 166, 63, 140, 187, 155, 142, 19, 9, 184, 34, 160, 57, 32, 190, 161, 31, 211, 12, 174, 243, 88, 3, 17, 208, 196, 149, 215, 216, 68, 228, 101, 204, 110, 18, 197, 70, 99, 58, 5, 122, 107, 249, 72, 187, 83, 244, 4, 186, 198, 211, 52, 219 },
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4952),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4952),
                            Login = "doctor",
                            ModifyDate = new DateTime(2023, 3, 20, 14, 47, 14, 182, DateTimeKind.Local).AddTicks(4953),
                            Name = "User Medical",
                            PasswordHash = new byte[] { 136, 231, 247, 255, 64, 65, 120, 143, 228, 205, 70, 84, 175, 19, 159, 150, 106, 63, 174, 52, 171, 169, 110, 213, 162, 227, 172, 39, 131, 204, 4, 0, 180, 180, 37, 244, 220, 105, 147, 207, 196, 20, 56, 185, 4, 114, 7, 165, 105, 220, 231, 127, 235, 187, 84, 243, 28, 255, 182, 200, 30, 103, 113, 97 },
                            PasswordSalt = new byte[] { 132, 7, 54, 74, 141, 98, 47, 208, 196, 172, 53, 124, 25, 163, 135, 42, 220, 213, 194, 103, 254, 18, 31, 132, 91, 62, 181, 50, 25, 117, 63, 157, 115, 219, 32, 165, 63, 34, 74, 225, 208, 236, 126, 104, 125, 20, 100, 55, 51, 188, 34, 117, 215, 142, 80, 117, 104, 202, 141, 117, 114, 236, 88, 67, 97, 141, 186, 72, 53, 52, 247, 53, 162, 72, 125, 48, 160, 244, 216, 42, 114, 42, 158, 25, 108, 213, 67, 189, 248, 110, 144, 178, 122, 19, 101, 60, 155, 45, 214, 47, 127, 178, 210, 171, 125, 229, 193, 118, 155, 176, 165, 65, 245, 227, 219, 135, 93, 193, 77, 65, 142, 53, 114, 71, 6, 105, 157, 242 },
                            Role = "Medical"
                        });
                });

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", null)
                        .WithMany()
                        .HasForeignKey("MedicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.RoleGroup", null)
                        .WithMany()
                        .HasForeignKey("RoleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "User")
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Domains.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Model.Entity.Principals.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Domains.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Medical", b =>
                {
                    b.Navigation("Patienties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Model.Entity.Principals.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
